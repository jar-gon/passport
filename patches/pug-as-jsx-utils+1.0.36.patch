diff --git a/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js b/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
index d28e499..6bfa6b0 100644
--- a/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
+++ b/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
@@ -9,6 +9,16 @@ var prettier = _interopDefault(require('prettier'));
 var jsc = _interopDefault(require('jscodeshift'));
 var babel = _interopDefault(require('@babel/core'));
 
+var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
+
+var escapeStringRegexp = function (str) {
+  if (typeof str !== 'string') {
+    throw new TypeError('Expected a string');
+  }
+
+  return str.replace(matchOperatorsRe, '\\$&');
+};
+
 const reservedWords = ['Object', 'String', 'Number', 'Array', 'JSON', 'Math', 'null'];
 
 const isReactElement = node => node.parent.parent.node.type === 'JSXElement' && node.node.name.search(/^[a-z]/) === 0;
@@ -85,18 +95,62 @@ const analyzeJsx = (jsxOutput, options = {}) => {
 
     if (p.parent.node.type === 'Property' && p.parent.node.key === p.node) {
       return false;
+    } // exclude require call
+
+
+    if (p.parent.node.type === 'CallExpression' && p.node.name === 'require') {
+      return false;
+    } // exclude namespace key
+
+
+    if (p.parent.node.type === 'JSXNamespacedName') {
+      return false;
     }
 
     return true;
   }).forEach(p => {
     variables = [...variables, p.node.name];
   });
-  variables = arrayUnique(variables.filter(e => varsToIgnore.indexOf(e) === -1)).sort();
+  variables = arrayUnique(variables.filter(e => varsToIgnore.indexOf(e) === -1).map(x => x.split('-')[0])).sort(); // Get require.
+
+  let requires = {};
+  jsxRoot.find(jsc.JSXAttribute).filter(p => {
+    const {
+      value
+    } = p.node;
+
+    if (value.type === 'JSXExpressionContainer') {
+      const {
+        expression
+      } = value;
+
+      if (expression && expression.type === 'CallExpression' && expression.callee.name === 'require') {
+        return true;
+      }
+    }
+
+    return false;
+  }).forEach(p => {
+    const {
+      value: {
+        expression
+      }
+    } = p.node;
+    const [target] = expression.arguments;
+
+    if (/^(['"]).*\1$/.test(target.raw)) {
+      const key = hashCode(target.value);
+      requires[`require\\(${escapeStringRegexp(target.raw)}\\)`] = [`require_${key}`, target.value];
+    }
+  });
   return {
     useThis,
     useMacro: !!variables.find(e => e === '__macro'),
     useFragment: !!variables.find(e => e === 'Fragment'),
-    variables: variables.filter(e => ['__macro', 'Fragment'].indexOf(e) === -1)
+    useRequire: !!Object.keys(requires).length,
+    useGet: variables.includes('_get'),
+    variables: variables.filter(e => ['__macro', 'Fragment', 'fragment', '_get'].indexOf(e) === -1),
+    requires
   };
 };
 
@@ -415,7 +469,7 @@ const parse = require('pug-parser');
 const walk = require('pug-walk');
 
 const transform = function (ast) {
-  let endBlock;
+  const nodes = [];
   walk(ast, (node, replace) => {
     switch (node.type) {
       case 'Tag':
@@ -430,6 +484,7 @@ const transform = function (ast) {
             attr.val = '"__rest"';
           } else if (!/^(['"]).*\1$/.test(val)) {
             val = !/^\(.*\)$/.test(val) ? val : val.substring(1, val.length - 1);
+            val = transformGetFn(val);
             attr.val = `"{${!val.replace ? val : val.replace(/"/g, '\\"')}}"`;
             attr.mustEscape = false;
           }
@@ -437,15 +492,20 @@ const transform = function (ast) {
         break;
 
       case 'Code':
-        node.val = `"{${node.val}}"`;
-        break;
+        const {
+          type
+        } = nodes[0] || {};
+        node.val = transformGetFn(node.val);
+        node.val = !(type && ['Conditional', 'Each', 'Case'].includes(type)) ? `"{${node.val}}"` : `"${node.val}"`;
+        node.mustEscape = false;
+        return;
 
       case 'Conditional':
         {
-          let nodes;
+          let replacement;
 
           if (node.alternate) {
-            nodes = getConditionalNodes(node, endBlock);
+            replacement = getConditionalNodes(node, nodes);
           } else {
             const {
               test,
@@ -453,26 +513,31 @@ const transform = function (ast) {
               line,
               column
             } = node;
-            nodes = [!endBlock ? {
+            replacement = [needWrap(nodes) ? {
               type: 'Text',
               val: '{',
               line,
               column
             } : null, {
               type: 'Text',
-              val: `${node.test} && (`,
+              val: `${transformGetFn(node.test)} && (`,
               line,
               column
-            }, consequent, !endBlock ? {
+            }, consequent, {
               type: 'Text',
-              val: ')}',
+              val: ')',
+              line,
+              column
+            }, needWrap(nodes) ? {
+              type: 'Text',
+              val: '}',
               line,
               column
             } : null].filter(Boolean);
           }
 
-          replace(nodes);
-          endBlock = endBlock || nodes[nodes.length - 1];
+          replace(replacement);
+          node._last = replacement[replacement.length - 1];
         }
         break;
 
@@ -486,14 +551,14 @@ const transform = function (ast) {
             line,
             column
           } = node;
-          const nodes = [!endBlock ? {
+          const replacement = [needWrap(nodes) ? {
             type: 'Text',
             val: '{',
             line,
             column
           } : null, {
             type: 'Text',
-            val: `__macro.for(${obj}).map((${val}${key ? `, ${key}` : ''}) => (`,
+            val: `__macro.for(${transformGetFn(obj)}).map((${val}${key ? `, ${key}` : ''}) => (`,
             line,
             column
           }, block, {
@@ -501,14 +566,14 @@ const transform = function (ast) {
             val: '))',
             line,
             column
-          }, !endBlock ? {
+          }, needWrap(nodes) ? {
             type: 'Text',
             val: '}',
             line,
             column
           } : null].filter(Boolean);
-          replace(nodes);
-          endBlock = endBlock || nodes[nodes.length - 1];
+          replace(replacement);
+          node._last = replacement[replacement.length - 1];
         }
         break;
 
@@ -521,7 +586,7 @@ const transform = function (ast) {
             line,
             column
           } = node;
-          const nodes = [!endBlock ? {
+          const replacement = [needWrap(nodes) ? {
             type: 'Text',
             val: '{',
             line,
@@ -533,7 +598,7 @@ const transform = function (ast) {
             column
           }, {
             type: 'Text',
-            val: `switch (${expr}) {\n`,
+            val: `switch (${transformGetFn(expr)}) {\n`,
             line,
             column
           }, ...block.nodes.map(node => [node.expr !== 'default' ? {
@@ -571,31 +636,70 @@ const transform = function (ast) {
             val: '})()',
             line,
             column
-          }, !endBlock ? {
+          }, needWrap(nodes) ? {
             type: 'Text',
             val: '}',
             line,
             column
           } : null].filter(Boolean);
-          replace(nodes);
-          endBlock = endBlock || nodes[nodes.length - 1];
+          replace(replacement);
+          node._last = replacement[replacement.length - 1];
         }
         break;
+
+      default:
+        return;
     }
+
+    nodes.unshift(node);
   }, node => {
-    if (node === endBlock) {
-      endBlock = null;
+    switch (node.type) {
+      case 'Tag':
+        nodes.shift();
+        break;
+
+      default:
+        if (nodes[0] && (nodes[0] === node || nodes[0]._last === node)) {
+          nodes.shift();
+        }
+
+        break;
     }
   });
   return ast;
 };
 
-function getConditionalNodes(node, endBlock, deep) {
+function transformGetFn(str) {
+  const dict = {};
+
+  while (str.includes && str.includes('_get(')) {
+    str = str.replace(/_get\([^.()\n]+(\.[^.()\n]+)+\)/, match => {
+      const [, path, value] = match.split(/_get\(|\)|, ?/);
+      const array = path.split(/[.\[\]]/).filter(Boolean);
+      const key = hashCode(match);
+      dict[key] = `_get(${array[0]}, '${array.slice(1).join('.').replace(/'/g, '\\\'')}'${value ? `, ${value}` : ''})`;
+      return `_${key}_`;
+    });
+  }
+
+  Object.entries(dict).reverse().forEach(([key, value]) => {
+    str = str.replace(new RegExp(`_${key}_`, 'g'), value);
+  });
+  return str;
+}
+
+function needWrap(nodes) {
+  const {
+    type
+  } = nodes[0] || {};
+  return !type || type === 'Tag';
+}
+
+function getConditionalNodes(node, nodes) {
   const {
     type,
     test,
     consequent,
-    alternate,
     line,
     column
   } = node;
@@ -614,14 +718,14 @@ function getConditionalNodes(node, endBlock, deep) {
     }];
   }
 
-  return [!deep && !endBlock ? {
+  return [needWrap(nodes) ? {
     type: 'Text',
     val: '{',
     line,
     column
   } : null, {
     type: 'Text',
-    val: `${node.test} ? `,
+    val: `${transformGetFn(node.test)} ? `,
     line,
     column
   }, ...[{
@@ -639,12 +743,12 @@ function getConditionalNodes(node, endBlock, deep) {
     val: ' : ',
     line,
     column
-  }, ...(!alternate ? [{
+  }, ...(!node.alternate ? [{
     type: 'Text',
     val: 'null',
     line,
     column
-  }] : getConditionalNodes(alternate, endBlock, true)), !deep && !endBlock ? {
+  }] : getConditionalChildNodes(node, nodes)), needWrap(nodes) ? {
     type: 'Text',
     val: '}',
     line,
@@ -652,6 +756,13 @@ function getConditionalNodes(node, endBlock, deep) {
   } : null].filter(Boolean);
 }
 
+function getConditionalChildNodes(node, nodes) {
+  nodes.unshift(node);
+  const result = getConditionalNodes(node.alternate, nodes);
+  nodes.shift();
+  return result;
+}
+
 const macro = `const __macro = {
   for: items => ({
     map: (mapFn) => {
@@ -689,7 +800,7 @@ const works = [// combine the contents of two className attributes.
   pre: [/\{([^{}]+)\}/g, (context, whole, p1) => {
     const content = p1.replace(/^\{(.*)\}$/, '$1').replace(/\n\s+\|\s+/g, ' ').replace(/\\\n\s+/g, ' ');
     const key = hashCode(content);
-    context[key] = content;
+    context[key] = transformGetFn(content);
     return `{__archived_${key}__}`;
   }],
   post: [/\{__archived_([a-z0-9]+)__\}/g, (context, whole, p1) => `{${context[p1]}}`]
@@ -885,6 +996,18 @@ const resolveModule = (moduleName, rootDir) => {
   return moduleName;
 };
 
+const antd = {
+  names: Object.keys(require('antd')).filter(x => /^[A-Z]/.test(x)),
+  modules: {}
+};
+antd.names.forEach(name => {
+  const module = name[0].toLowerCase() + name.substr(1).replace(/[A-Z]/g, c => `-${c}`);
+  antd.modules[name] = {
+    name,
+    moduleName: `antd/lib/${module}`
+  };
+});
+
 const toJsx = (source, options = {}) => {
   const localWorks = works.map(({
     pre,
@@ -970,7 +1093,9 @@ const toJsx = (source, options = {}) => {
 
   let jsxCode = `\n${pug.render(pugCode, {
     pretty: true,
-    plugins
+    plugins,
+    filename: options.resourcePath,
+    basedir: options.rootDir
   })}\n`; // post-processing pug.render
   // post-processing is performed in the reverse order of pre-processing
 
@@ -1027,6 +1152,11 @@ const toJsx = (source, options = {}) => {
       imports
     } = getImports(analyzed.variables, resolves);
     const variables = analyzed.variables.filter(e => used.indexOf(e) === -1);
+
+    if (analyzed.useRequire) {
+      Object.entries(analyzed.requires).forEach(([search, [replacement]]) => result.jsx = result.jsx.replace(new RegExp(search, 'g'), replacement));
+    }
+
     result = { ...result,
       ...analyzed,
       variables,
@@ -1078,6 +1208,37 @@ const pugToJsx = (source, userOptions = {}) => {
   const [_module, _import] = getPragma(options.pragma);
 
   if (options.template) {
+    result.imports = result.imports.concat(Object.values(result.requires).map(([name, moduleName]) => ({
+      name,
+      moduleName
+    }))); // next
+
+    if (result.variables.includes('Link')) {
+      result.imports.push({
+        name: 'Link',
+        moduleName: 'next/link'
+      });
+      result.variables = result.variables.filter(x => x !== 'Link');
+    } // twist
+
+
+    result.jsx = result.jsx.replace(/(<\/?)([^\-:>\s\n]+(-[^\-:>\s\n]+)+)/g, (p0, p1, p2) => `${p1}${p2.replace(/-/g, '.')}`).replace(/(<\/?)([^.:>\s\n]+(\.[^.:>\s\n]+)+):([^.:>\s\n]+)/g, (p0, p1, p2, p3, p4) => `${p1}${p2}_${p4}`); // _get
+
+    if (result.useGet) {
+      result.imports.push({
+        name: '_get',
+        moduleName: 'lodash-es/get'
+      });
+    } // antd
+
+
+    const names = antd.names.filter(x => result.variables.includes(x)).sort();
+
+    if (names.length) {
+      result.imports = result.imports.concat(names.map(x => antd.modules[x]));
+      result.variables = result.variables.filter(x => !names.includes(x));
+    }
+
     const jsxTemplate = [result.useFragment ? `import ${_import}, { Fragment } from '${_module}';` : `import ${_import} from '${_module}';`, ...(result.imports || []).map(({
       name,
       member,
