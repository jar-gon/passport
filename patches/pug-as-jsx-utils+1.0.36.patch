diff --git a/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js b/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
index d28e499..6d76c32 100644
--- a/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
+++ b/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
@@ -9,6 +9,16 @@ var prettier = _interopDefault(require('prettier'));
 var jsc = _interopDefault(require('jscodeshift'));
 var babel = _interopDefault(require('@babel/core'));
 
+var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
+
+var escapeStringRegexp = function (str) {
+  if (typeof str !== 'string') {
+    throw new TypeError('Expected a string');
+  }
+
+  return str.replace(matchOperatorsRe, '\\$&');
+};
+
 const reservedWords = ['Object', 'String', 'Number', 'Array', 'JSON', 'Math', 'null'];
 
 const isReactElement = node => node.parent.parent.node.type === 'JSXElement' && node.node.name.search(/^[a-z]/) === 0;
@@ -85,18 +95,62 @@ const analyzeJsx = (jsxOutput, options = {}) => {
 
     if (p.parent.node.type === 'Property' && p.parent.node.key === p.node) {
       return false;
+    } // exclude require call
+
+
+    if (p.parent.node.type === 'CallExpression' && p.node.name === 'require') {
+      return false;
+    } // exclude namespace key
+
+
+    if (p.parent.node.type === 'JSXNamespacedName') {
+      return false;
     }
 
     return true;
   }).forEach(p => {
     variables = [...variables, p.node.name];
   });
-  variables = arrayUnique(variables.filter(e => varsToIgnore.indexOf(e) === -1)).sort();
+  variables = arrayUnique(variables.filter(e => varsToIgnore.indexOf(e) === -1).map(x => x.split('-')[0])).sort(); // Get require.
+
+  let requires = {};
+  jsxRoot.find(jsc.JSXAttribute).filter(p => {
+    const {
+      value
+    } = p.node;
+
+    if (value.type === 'JSXExpressionContainer') {
+      const {
+        expression
+      } = value;
+
+      if (expression && expression.type === 'CallExpression' && expression.callee.name === 'require') {
+        return true;
+      }
+    }
+
+    return false;
+  }).forEach(p => {
+    const {
+      value: {
+        expression
+      }
+    } = p.node;
+    const [target] = expression.arguments;
+
+    if (/^(['"]).*\1$/.test(target.raw)) {
+      const key = hashCode(target.value);
+      requires[`require\\(${escapeStringRegexp(target.raw)}\\)`] = [`require_${key}`, target.value];
+    }
+  });
   return {
     useThis,
     useMacro: !!variables.find(e => e === '__macro'),
     useFragment: !!variables.find(e => e === 'Fragment'),
-    variables: variables.filter(e => ['__macro', 'Fragment'].indexOf(e) === -1)
+    useRequire: !!Object.keys(requires).length,
+    useGet: variables.includes('_get'),
+    variables: variables.filter(e => ['__macro', 'Fragment', 'fragment', '_get'].indexOf(e) === -1),
+    requires
   };
 };
 
@@ -415,8 +469,10 @@ const parse = require('pug-parser');
 const walk = require('pug-walk');
 
 const transform = function (ast) {
-  let endBlock;
+  const nodes = [];
   walk(ast, (node, replace) => {
+    let replacement;
+
     switch (node.type) {
       case 'Tag':
         node.attrs.forEach(attr => {
@@ -430,6 +486,7 @@ const transform = function (ast) {
             attr.val = '"__rest"';
           } else if (!/^(['"]).*\1$/.test(val)) {
             val = !/^\(.*\)$/.test(val) ? val : val.substring(1, val.length - 1);
+            val = transformGetFn(val);
             attr.val = `"{${!val.replace ? val : val.replace(/"/g, '\\"')}}"`;
             attr.mustEscape = false;
           }
@@ -437,42 +494,86 @@ const transform = function (ast) {
         break;
 
       case 'Code':
-        node.val = `"{${node.val}}"`;
-        break;
+        const {
+          type
+        } = nodes[0] || {};
+        node.val = transformGetFn(node.val);
+        node.val = !(type && ['Conditional', 'Each', 'Case'].includes(type)) ? `"{${node.val}}"` : `"${node.val}"`;
+        node.mustEscape = false;
+        return;
 
       case 'Conditional':
         {
-          let nodes;
-
-          if (node.alternate) {
-            nodes = getConditionalNodes(node, endBlock);
-          } else {
+          const getNodes = node => {
             const {
+              type,
               test,
               consequent,
               line,
               column
             } = node;
-            nodes = [!endBlock ? {
+
+            if (type !== 'Conditional') {
+              return [{
+                type: 'Text',
+                val: '(',
+                line,
+                column
+              }, node, {
+                type: 'Text',
+                val: '\n)',
+                line,
+                column
+              }];
+            }
+
+            consequent.nodes = isFragmentRequired(consequent.nodes) ? wrapInFragment(consequent.nodes) : consequent.nodes;
+            node.alternate = node.alternate || {
+              type: 'Block',
+              nodes: [{
+                type: 'Text',
+                val: '',
+                line,
+                column
+              }],
+              line
+            };
+
+            if (node.alternate.nodes) {
+              node.alternate.nodes = isFragmentRequired(node.alternate.nodes) ? wrapInFragment(node.alternate.nodes) : node.alternate.nodes;
+            }
+
+            nodes.unshift(node);
+            const alternate = getNodes(node.alternate);
+            nodes.shift();
+            const result = [{
               type: 'Text',
-              val: '{',
+              val: `${transformGetFn(node.test)} ? `,
               line,
               column
-            } : null, {
+            }, ...[{
               type: 'Text',
-              val: `${node.test} && (`,
+              val: '(',
               line,
               column
-            }, consequent, !endBlock ? {
+            }, consequent, {
               type: 'Text',
-              val: ')}',
+              val: ')',
               line,
               column
-            } : null].filter(Boolean);
-          }
+            }], {
+              type: 'Text',
+              val: ' : ',
+              line,
+              column
+            }, ...alternate];
+            return isBracketsRequired(nodes) ? wrapInBrackets(result) : result;
+          };
 
-          replace(nodes);
-          endBlock = endBlock || nodes[nodes.length - 1];
+          replacement = getNodes(node);
+          replace(replacement);
+          node._last = replacement[replacement.length - 1];
+          replacement = null;
         }
         break;
 
@@ -486,14 +587,9 @@ const transform = function (ast) {
             line,
             column
           } = node;
-          const nodes = [!endBlock ? {
-            type: 'Text',
-            val: '{',
-            line,
-            column
-          } : null, {
+          replacement = [{
             type: 'Text',
-            val: `__macro.for(${obj}).map((${val}${key ? `, ${key}` : ''}) => (`,
+            val: `__macro.for(${transformGetFn(obj)}).map((${val}${key ? `, ${key}` : ''}) => (`,
             line,
             column
           }, block, {
@@ -501,14 +597,7 @@ const transform = function (ast) {
             val: '))',
             line,
             column
-          }, !endBlock ? {
-            type: 'Text',
-            val: '}',
-            line,
-            column
-          } : null].filter(Boolean);
-          replace(nodes);
-          endBlock = endBlock || nodes[nodes.length - 1];
+          }];
         }
         break;
 
@@ -521,42 +610,40 @@ const transform = function (ast) {
             line,
             column
           } = node;
-          const nodes = [!endBlock ? {
-            type: 'Text',
-            val: '{',
-            line,
-            column
-          } : null, {
+          replacement = [{
             type: 'Text',
             val: '(() => {\n',
             line,
             column
           }, {
             type: 'Text',
-            val: `switch (${expr}) {\n`,
+            val: `switch (${transformGetFn(expr)}) {\n`,
             line,
             column
-          }, ...block.nodes.map(node => [node.expr !== 'default' ? {
-            type: 'Text',
-            val: `case ${node.expr}:\n`,
-            line,
-            column
-          } : {
-            type: 'Text',
-            val: 'default:\n',
-            line,
-            column
-          }, {
-            type: 'Text',
-            val: 'return (',
-            line,
-            column
-          }, node.block, {
-            type: 'Text',
-            val: ');\n',
-            line,
-            column
-          }]), {
+          }, ...block.nodes.map(node => {
+            node.block.nodes = isFragmentRequired(node.block.nodes) ? wrapInFragment(node.block.nodes) : node.block.nodes;
+            return [node.expr !== 'default' ? {
+              type: 'Text',
+              val: `case ${node.expr}:\n`,
+              line,
+              column
+            } : {
+              type: 'Text',
+              val: 'default:\n',
+              line,
+              column
+            }, {
+              type: 'Text',
+              val: 'return (',
+              line,
+              column
+            }, node.block, {
+              type: 'Text',
+              val: ');\n',
+              line,
+              column
+            }];
+          }), {
             type: 'Text',
             val: '}\n',
             line,
@@ -571,85 +658,90 @@ const transform = function (ast) {
             val: '})()',
             line,
             column
-          }, !endBlock ? {
-            type: 'Text',
-            val: '}',
-            line,
-            column
-          } : null].filter(Boolean);
-          replace(nodes);
-          endBlock = endBlock || nodes[nodes.length - 1];
+          }];
         }
         break;
+
+      default:
+        return;
+    }
+
+    if (replacement) {
+      replace(isBracketsRequired(nodes) ? wrapInBrackets(replacement) : replacement);
+      node._last = replacement[replacement.length - 1];
+      replacement = null;
     }
+
+    nodes.unshift(node);
   }, node => {
-    if (node === endBlock) {
-      endBlock = null;
+    switch (node.type) {
+      case 'Tag':
+        nodes.shift();
+        break;
+
+      default:
+        if (nodes[0] && (nodes[0] === node || nodes[0]._last === node)) {
+          nodes.shift();
+        }
+
+        break;
     }
   });
   return ast;
 };
 
-function getConditionalNodes(node, endBlock, deep) {
-  const {
-    type,
-    test,
-    consequent,
-    alternate,
-    line,
-    column
-  } = node;
-
-  if (type !== 'Conditional') {
-    return [{
-      type: 'Text',
-      val: '(',
-      line,
-      column
-    }, node, {
-      type: 'Text',
-      val: '\n)',
-      line,
-      column
-    }];
+function transformGetFn(str) {
+  const dict = {};
+
+  while (str.includes && str.includes('_get(')) {
+    str = str.replace(/_get\([^.()\n]+(\.[^.()\n]+)+\)/, match => {
+      const [, path, value] = match.split(/_get\(|\)|, ?/);
+      const array = path.split(/[.\[\]]/).filter(Boolean);
+      const key = hashCode(match);
+      dict[key] = `_get(${array[0]}, '${array.slice(1).join('.').replace(/'/g, '\\\'')}'${value ? `, ${value}` : ''})`;
+      return `_${key}_`;
+    });
   }
 
-  return [!deep && !endBlock ? {
-    type: 'Text',
-    val: '{',
-    line,
-    column
-  } : null, {
-    type: 'Text',
-    val: `${node.test} ? `,
-    line,
-    column
-  }, ...[{
-    type: 'Text',
-    val: '(',
-    line,
-    column
-  }, consequent, {
-    type: 'Text',
-    val: ')',
-    line,
-    column
-  }], {
-    type: 'Text',
-    val: ' : ',
-    line,
-    column
-  }, ...(!alternate ? [{
+  Object.entries(dict).reverse().forEach(([key, value]) => {
+    str = str.replace(new RegExp(`_${key}_`, 'g'), value);
+  });
+  return str;
+}
+
+function isBracketsRequired(nodes) {
+  const {
+    type
+  } = nodes[0] || {};
+  return !type || type === 'Tag';
+}
+
+function wrapInBrackets(nodes) {
+  return [{
     type: 'Text',
-    val: 'null',
-    line,
-    column
-  }] : getConditionalNodes(alternate, endBlock, true)), !deep && !endBlock ? {
+    val: '{'
+  }, ...nodes, {
     type: 'Text',
-    val: '}',
-    line,
-    column
-  } : null].filter(Boolean);
+    val: '}'
+  }];
+}
+
+function isFragmentRequired(nodes) {
+  const [node] = nodes;
+  return nodes.length > 1 || node && node.type === 'Text';
+}
+
+function wrapInFragment(nodes) {
+  return [{
+    type: 'Tag',
+    name: 'Fragment',
+    block: {
+      type: 'Block',
+      nodes
+    },
+    attrs: [],
+    attributeBlocks: []
+  }];
 }
 
 const macro = `const __macro = {
@@ -689,7 +781,7 @@ const works = [// combine the contents of two className attributes.
   pre: [/\{([^{}]+)\}/g, (context, whole, p1) => {
     const content = p1.replace(/^\{(.*)\}$/, '$1').replace(/\n\s+\|\s+/g, ' ').replace(/\\\n\s+/g, ' ');
     const key = hashCode(content);
-    context[key] = content;
+    context[key] = transformGetFn(content);
     return `{__archived_${key}__}`;
   }],
   post: [/\{__archived_([a-z0-9]+)__\}/g, (context, whole, p1) => `{${context[p1]}}`]
@@ -885,6 +977,18 @@ const resolveModule = (moduleName, rootDir) => {
   return moduleName;
 };
 
+const antd = {
+  names: Object.keys(require('antd')).filter(x => /^[A-Z]/.test(x)),
+  modules: {}
+};
+antd.names.forEach(name => {
+  const module = name[0].toLowerCase() + name.substr(1).replace(/[A-Z]/g, c => `-${c.toLowerCase()}`);
+  antd.modules[name] = {
+    name,
+    moduleName: `antd/es/${module}`
+  };
+});
+
 const toJsx = (source, options = {}) => {
   const localWorks = works.map(({
     pre,
@@ -970,7 +1074,9 @@ const toJsx = (source, options = {}) => {
 
   let jsxCode = `\n${pug.render(pugCode, {
     pretty: true,
-    plugins
+    plugins,
+    filename: options.resourcePath,
+    basedir: options.rootDir
   })}\n`; // post-processing pug.render
   // post-processing is performed in the reverse order of pre-processing
 
@@ -1027,6 +1133,11 @@ const toJsx = (source, options = {}) => {
       imports
     } = getImports(analyzed.variables, resolves);
     const variables = analyzed.variables.filter(e => used.indexOf(e) === -1);
+
+    if (analyzed.useRequire) {
+      Object.entries(analyzed.requires).forEach(([search, [replacement]]) => result.jsx = result.jsx.replace(new RegExp(search, 'g'), replacement));
+    }
+
     result = { ...result,
       ...analyzed,
       variables,
@@ -1078,6 +1189,37 @@ const pugToJsx = (source, userOptions = {}) => {
   const [_module, _import] = getPragma(options.pragma);
 
   if (options.template) {
+    result.imports = result.imports.concat(Object.values(result.requires).map(([name, moduleName]) => ({
+      name,
+      moduleName
+    }))); // twist
+
+    result.jsx = result.jsx.replace(/(<\/?)([^\-:>\s\n]+(-[^\-:>\s\n]+)+)/g, (p0, p1, p2) => `${p1}${p2.replace(/-/g, '.')}`).replace(/(<\/?)([^.:>\s\n]+(\.[^.:>\s\n]+)+):([^.:>\s\n]+)/g, (p0, p1, p2, p3, p4) => `${p1}${p2}_${p4}`); // _get
+
+    if (result.useGet) {
+      result.imports.push({
+        name: '_get',
+        moduleName: 'lodash-es/get'
+      });
+    } // next
+
+
+    if (result.variables.includes('Link')) {
+      result.imports.push({
+        name: 'Link',
+        moduleName: 'next/link'
+      });
+      result.variables = result.variables.filter(x => x !== 'Link');
+    } // antd
+
+
+    const names = antd.names.filter(x => result.variables.includes(x)).sort();
+
+    if (names.length) {
+      result.imports = result.imports.concat(names.map(x => antd.modules[x]));
+      result.variables = result.variables.filter(x => !names.includes(x));
+    }
+
     const jsxTemplate = [result.useFragment ? `import ${_import}, { Fragment } from '${_module}';` : `import ${_import} from '${_module}';`, ...(result.imports || []).map(({
       name,
       member,
diff --git a/node_modules/pug-as-jsx-utils/src/lib/macro.js b/node_modules/pug-as-jsx-utils/src/lib/macro.js
new file mode 100644
index 0000000..99a3bad
--- /dev/null
+++ b/node_modules/pug-as-jsx-utils/src/lib/macro.js
@@ -0,0 +1,21 @@
+export default {
+  for: items => ({
+    map: (mapFn) => {
+      let mapFns = [];
+      if (items && items['@@__IMMUTABLE_MAP__@@']) {
+        items.mapEntries(([key, value], i) => {
+          mapFns.push(mapFn(value, key, i));
+        });
+      } else if (items && items['@@__IMMUTABLE_LIST__@@']) {
+        items.forEach((value, i) => {
+          mapFns.push(mapFn(value, i, i));
+        });
+      } else if (Array.isArray(items)) {
+        mapFns = items.map((value, index) => mapFn(value, index, index));
+      } else {
+        mapFns = Object.keys(items || []).map((key, index) => mapFn(items[key], key, index));
+      }
+      return mapFns;
+    },
+  }),
+};
